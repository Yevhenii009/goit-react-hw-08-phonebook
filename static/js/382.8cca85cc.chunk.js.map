{"version":3,"file":"static/js/382.8cca85cc.chunk.js","mappings":"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","sources":["redux/selectors.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.jsx","webpack://react-homework-template/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\nexport const selectFilteredContactList = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    const filtredContacts = () => {\n      const normalizedFilter = filter.toLowerCase();\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n      );\n    };\n    return filtredContacts().sort((a, b) => a.name.localeCompare(b.name));\n  }\n);","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"button\":\"ContactForm_button__eSwX9\",\"error\":\"ContactForm_error__C1smZ\"};","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { object, string, number } from 'yup';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/operations';\nimport { Button } from 'components/Button/Button';\nimport { selectContacts, selectError, selectIsLoading } from 'redux/selectors';\nimport { ThreeDots } from 'react-loader-spinner';\nimport { Notify } from 'notiflix';\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    const normalizedName = values.name.toLowerCase();\n    const filtredContacts = contacts.find(\n      contact => contact.name.toLowerCase() === normalizedName\n    );\n    if (filtredContacts) {\n      Notify.warning(`${values.name} is already in contacts.`);\n      return;\n    }\n    dispatch(\n      addContact({\n        name: values.name,\n        number: values.number,\n      })\n    );\n    resetForm();\n  };\n\n  const initialValues = { name: '', number: '' };\n  const userSchema = object({\n    name: string().required(),\n    number: number().required().positive().integer(),\n  });\n  return (\n    <div className={css.formWrapper}>\n      <h2 className={css.formTitle}>PhoneBook</h2>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={userSchema}\n      >\n        <Form className={css.form} autoComplete=\"off\">\n          <div className={css.formInputGroup}>\n            <Field className={css.formInput} name=\"name\" placeholder=\"name\" />\n            <ErrorMessage className={css.error} component=\"div\" name=\"name\" />\n          </div>\n          <div className={css.formInputGroup}>\n            <Field\n              className={css.formInput}\n              name=\"number\"\n              placeholder=\"number\"\n            />\n            <ErrorMessage className={css.error} component=\"div\" name=\"number\" />\n          </div>\n          <Button type=\"submit\">\n            {isLoading && !error ? (\n              <ThreeDots\n                height=\"25\"\n                width=\"116\"\n                color=\"#af7b7b\"\n                ariaLabel=\"three-dots-loading\"\n                visible={true}\n              />\n            ) : (\n              <>Add contact</>\n            )}\n          </Button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"formInput\":\"Filter_formInput__XNLZn\"};","import {\n  selectContacts,\n  selectFilter,\n  selectFilteredContactList,\n} from '../../redux/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filterSlice';\nimport css from './Filter.module.css';\n\nexport const Filter = () => {\n  const value = useSelector(selectFilter);\n  const filteredContactsLength = useSelector(selectFilteredContactList).length;\n  const contactsLength = useSelector(selectContacts).length;\n  const dispatch = useDispatch();\n  const changeFieldFilter = elem => dispatch(changeFilter(elem.currentTarget.value));\n\n  return (\n    <div className={css.filter}>\n      <label>\n        Find contacts by name\n        {filteredContactsLength !== contactsLength && (\n          <>\n            :&nbsp;<b>{filteredContactsLength}</b>\n          </>\n        )}\n        <br />\n        <input\n          autoComplete=\"off\"\n          className={css.formInput}\n          value={value}\n          type=\"text\"\n          name=\"filter\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={changeFieldFilter}\n        />\n      </label>\n    </div>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactListItem\":\"Contact_contactListItem__++ahj\",\"button\":\"Contact_button__F+kJb\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './Contact.module.css';\n\nexport const Contact = ({ contact, showModal, showEditModal }) => {\n  const phoneNumber = `tel:${contact.number}`;\n\n  return (\n    <>\n      <td>{contact.name}</td>\n      <td>\n        <a href={phoneNumber}>{contact.number}</a>\n      </td>\n      <td\n        onClick={() => showModal(contact.id, contact.name)}\n        className={css.deleteButton}\n        id={contact.id}\n      >\n        Delete\n      </td>\n      <td\n        onClick={() => showEditModal(contact.id, contact.name, contact.number)}\n        className={css.deleteButton}\n        id={contact.id}\n      >\n        Edit\n      </td>\n    </>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n  showModal: PropTypes.func.isRequired,\n  showEditModal: PropTypes.func.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"Modal_overlay__r63M6\",\"modal\":\"Modal_modal__DJDMv\"};","import { useEffect } from 'react';\nimport css from './Modal.module.css';\nimport PropTypes from 'prop-types';\n\nexport const Modal = ({ children, modalShoudClose }) => {\n  useEffect(() => {\n    const handleKeyDown = elem => {\n      if (elem.code === 'Escape') {\n        modalShoudClose();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [modalShoudClose]);\n\n  const handleBackdropClick = elem => {\n    if (elem.currentTarget === elem.target) {\n      modalShoudClose();\n    }\n  };\n  return (\n    <div className={css.overlay} onClick={handleBackdropClick}>\n      <div className={css.modal}>{children}</div>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  modalShoudClose: PropTypes.func.isRequired,\n  children: PropTypes.object.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactListTable\":\"ContactList_contactListTable__CAdj6\",\"button\":\"ContactList_button__7kL4l\"};","import React, { useState } from 'react';\nimport { Contact } from 'components/Contact/Contact';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilteredContactList } from 'redux/selectors';\nimport { deleteContact, editContact } from '../../redux/operations';\nimport { Modal } from 'components/Modal/Modal';\nimport { Button } from 'components/Button/Button';\nimport css from './ContactList.module.css';\n\nlet contactNameToDelete = '';\nlet contactToEdite = {};\n\nexport const ContactList = () => {\n  const [shownModal, setShownModal] = useState(false);\n  const [shownEditModal, setShownEditModal] = useState(false);\n  const [idToDelete, setIdToDelete] = useState('');\n  const dispatch = useDispatch();\n  const shouldDeleteContact = () => {\n    dispatch(deleteContact(idToDelete));\n    modalShoudClose();\n  };\n\n  const showModal = (contactId, contactName) => {\n    contactNameToDelete = contactName;\n    setShownModal(true);\n    setIdToDelete(contactId);\n  };\n\n  const showEditModal = (contactId, contactName, contactNumber) => {\n    contactToEdite = { contactId, contactName, contactNumber };\n    setShownEditModal(true);\n  };\n\n  const modalShoudClose = () => {\n    setShownModal(false);\n    setShownEditModal(false);\n  };\n\n  const filteredContactList = useSelector(selectFilteredContactList);\n\n  const handleEdit = elem => {\n    elem.preventDefault();\n    const contact = elem.target.elements;\n    dispatch(\n      editContact({\n        name: contact.name.value,\n        number: contact.number.value,\n        contactId: contactToEdite.contactId,\n      })\n    );\n    contact.name.value = '';\n    contact.number.value = '';\n    setShownEditModal(false);\n  };\n\n  return (\n    <>\n      <table className={css.contactListTable}>\n        <tbody>\n          {filteredContactList.map(contact => (\n            <tr key={contact.id} className={css.contactListItem}>\n              <Contact\n                contact={contact}\n                showModal={showModal}\n                showEditModal={showEditModal}\n              />\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {shownModal && (\n        <Modal modalShoudClose={modalShoudClose}>\n          <>\n            <p className={css.title}>\n              Do you really want to remove\n              <br />\n              {contactNameToDelete}?\n            </p>\n            <Button type=\"button\" onClick={shouldDeleteContact}>\n              YES\n            </Button>\n            <Button type=\"button\" onClick={modalShoudClose}>\n              NO\n            </Button>\n          </>\n        </Modal>\n      )}\n\n      {shownEditModal && (\n        <Modal modalShoudClose={modalShoudClose}>\n          <>\n            <b>Edit contact</b>\n            <form className={css.form} onSubmit={handleEdit} autoComplete=\"off\">\n              <label className={css.label}>\n                Name\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  className={css.inputText}\n                  defaultValue={contactToEdite.contactName}\n                />\n              </label>\n              <label className={css.label}>\n                Number\n                <input\n                  type=\"text\"\n                  name=\"number\"\n                  className={css.inputText}\n                  defaultValue={contactToEdite.contactNumber}\n                />\n              </label>\n              <div>\n                <Button type=\"submit\">save</Button>\n                <Button type=\"button\" onClick={modalShoudClose}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </>\n        </Modal>\n      )}\n    </>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Contacts_wrapper__s7EJR\",\"title\":\"Contacts_title__LxdN4\"};","import { useEffect } from 'react';\nimport { selectContacts } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { Filter } from '../../components/Filter/Filter';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport css from './Contacts.module.css';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.wrapper}>\n      <ContactForm />\n      <h3 className={css.title}>Contacts: {contacts.length}</h3>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectFilteredContactList","createSelector","normalizedFilter","toLowerCase","contact","name","includes","filtredContacts","sort","a","b","localeCompare","ContactForm","useSelector","dispatch","useDispatch","userSchema","object","string","required","number","positive","integer","className","css","initialValues","onSubmit","values","resetForm","normalizedName","find","Notify","addContact","validationSchema","autoComplete","placeholder","component","Button","type","height","width","color","ariaLabel","visible","Filter","value","filteredContactsLength","length","contactsLength","pattern","title","onChange","elem","changeFilter","currentTarget","Contact","showModal","showEditModal","phoneNumber","href","onClick","id","Modal","children","modalShoudClose","useEffect","handleKeyDown","code","window","addEventListener","removeEventListener","target","contactNameToDelete","contactToEdite","ContactList","useState","shownModal","setShownModal","shownEditModal","setShownEditModal","idToDelete","setIdToDelete","contactId","contactName","contactNumber","filteredContactList","map","deleteContact","preventDefault","elements","editContact","defaultValue","Contacts","fetchContacts"],"sourceRoot":""}